{"version":3,"sources":["file:///Users/qinx/coding/cocos2dx/Cocos2dx-taxi/assets/script/game/AudioManager.ts"],"names":["_decorator","AudioClip","assert","assetManager","ccclass","property","AudioManager","init","audioSource","_audioSource","playMusic","play","playSound","name","path","cacheAudioClip","_cacheAudioClipMap","playOneShot","resources","load","err","clip","console","warn"],"mappings":";;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAwBC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,Y,OAAAA,Y;;;;;;;OAC/C;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;8BAGjBM,Y,WADZF,OAAO,CAAC,cAAD,C,mCAAR,MACaE,YADb,CAC0B;AAKN,eAAJC,IAAI,CAACC,WAAD,EAA2B;AAC3CF,UAAAA,YAAY,CAACG,YAAb,GAA4BD,WAA5B;AACD;;AAEsB,eAATE,SAAS,GAAG;AACxB,gBAAMF,WAAW,GAAGF,YAAY,CAACG,YAAjC;AACAD,UAAAA,WAAW,CAACG,IAAZ;AACD;;AAEsB,eAATC,SAAS,CAACC,IAAD,EAAe;AACpC,gBAAML,WAAW,GAAGF,YAAY,CAACG,YAAjC;AACAP,UAAAA,MAAM,CAACM,WAAD,EAAc,2BAAd,CAAN;AAGA,gBAAMM,IAAI,GAAI,eAAcD,IAAK,EAAjC;AACA,cAAIE,cAAc,GAAGT,YAAY,CAACU,kBAAb,CAAgCF,IAAhC,CAArB;;AACA,cAAIC,cAAJ,EAAoB;AAClBP,YAAAA,WAAW,CAACS,WAAZ,CAAwBF,cAAxB,EAAwC,CAAxC;AACD,WAFD,MAEO;AAAA;;AACL,qCAAAZ,YAAY,CAACe,SAAb,gFAAwBC,IAAxB,CAA6BL,IAA7B,EAAmCb,SAAnC,EAA8C,CAACmB,GAAD,EAAMC,IAAN,KAAe;AAC3D,kBAAID,GAAJ,EAAS;AACPE,gBAAAA,OAAO,CAACC,IAAR,CAAaH,GAAb;AACA;AACD;;AAEDd,cAAAA,YAAY,CAACU,kBAAb,CAAgCF,IAAhC,IAAwCO,IAAxC;AACAb,cAAAA,WAAW,CAACS,WAAZ,CAAwBI,IAAxB,EAA8B,CAA9B;AACD,aARD;AAUD;AACF;;AAnCuB,O,mGAGuC,E","sourcesContent":["\nimport { _decorator, AudioClip, AudioSource, assert, assetManager } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('AudioManager')\nexport class AudioManager {\n\n  private static _audioSource?: AudioSource;\n  private static _cacheAudioClipMap: Record<string, AudioClip> = {};\n\n  public static init(audioSource: AudioSource) {\n    AudioManager._audioSource = audioSource;\n  }\n\n  public static playMusic() {\n    const audioSource = AudioManager._audioSource!;\n    audioSource.play();\n  }\n\n  public static playSound(name: string) {\n    const audioSource = AudioManager._audioSource!;\n    assert(audioSource, 'AudioManager not initted!')\n\n\n    const path = `audio/sound/${name}`;\n    let cacheAudioClip = AudioManager._cacheAudioClipMap[path];\n    if (cacheAudioClip) {\n      audioSource.playOneShot(cacheAudioClip, 1);\n    } else {\n      assetManager.resources?.load(path, AudioClip, (err, clip) => {\n        if (err) {\n          console.warn(err);\n          return;\n        }\n\n        AudioManager._cacheAudioClipMap[path] = clip;\n        audioSource.playOneShot(clip, 1);\n      })\n\n    }\n  }\n}\n"]}