{"version":3,"sources":["file:///Users/qinx/coding/cocos2dx/Cocos2dx-taxi/assets/script/data/UpdateLabelValue.ts"],"names":["_decorator","Label","ccclass","property","UpdateLabelValue","playUpdateValue","start","end","changeTime","_startVal","_endVal","_diffVal","_currTime","_changeTime","_string","_isPlaying","string","update","dt","targetVal","Math","floor"],"mappings":";;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAA6BC,MAAAA,K,OAAAA,K;;;;;;;AAC9BC,MAAAA,O,GAAsBF,U,CAAtBE,O;AAASC,MAAAA,Q,GAAaH,U,CAAbG,Q;;kCAGJC,gB,WADZF,OAAO,CAAC,kBAAD,C;;;;;;;;;;;;sEAGc,C;;oEACF,C;;qEACC,C;;sEACC,C;;wEACE,C;;uEACD,K;;;;;;;eAEdG,e,GAAP,yBAAuBC,KAAvB,EAAsCC,GAAtC,EAAmDC,UAAnD,EAAuE;AACrE,eAAKC,SAAL,GAAiBH,KAAjB;AACA,eAAKI,OAAL,GAAeH,GAAf;AACA,eAAKI,QAAL,GAAgB,KAAKD,OAAL,GAAe,KAAKD,SAApC;AACA,eAAKG,SAAL,GAAiB,CAAjB;AACA,eAAKC,WAAL,GAAmBL,UAAnB;;AAEA,cAAIA,UAAU,KAAK,CAAnB,EAAsB;AACpB,iBAAKM,OAAL,QAAkB,KAAKJ,OAAvB;AACD;;AAED,eAAKK,UAAL,GAAkB,IAAlB;AACA,eAAKC,MAAL,QAAiB,KAAKN,OAAtB;AACD,S;;eAEMO,M,GAAP,gBAAcC,EAAd,EAA0B;AACxB,cAAI,CAAC,KAAKH,UAAV,EAAsB;AACpB;AACD;;AAED,cAAI,KAAKH,SAAL,GAAiB,KAAKC,WAA1B,EAAuC;AACrC,iBAAKD,SAAL,IAAkBM,EAAlB;AACA,gBAAMC,SAAS,GAAG,KAAKV,SAAL,GAAiBW,IAAI,CAACC,KAAL,CAAa,KAAKT,SAAL,GAAiB,KAAKC,WAAvB,GAAsC,KAAKF,QAAvD,CAAnC;AACA,iBAAKK,MAAL,QAAiBG,SAAjB;AACA;AACD;;AAED,eAAKH,MAAL,QAAiB,KAAKN,OAAtB;AACA,eAAKK,UAAL,GAAkB,KAAlB;AACD,S;;;QAtCmCd,K","sourcesContent":["\nimport { _decorator, Component, Node, Label } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('UpdateLabelValue')\nexport class UpdateLabelValue extends Label {\n\n  private _startVal = 0;\n  private _endVal = 0;\n  private _diffVal = 0;\n  private _currTime = 0;\n  private _changeTime = 0;\n  private _isPlaying = false;\n\n  public playUpdateValue(start: number, end: number, changeTime: number) {\n    this._startVal = start;\n    this._endVal = end;\n    this._diffVal = this._endVal - this._startVal;\n    this._currTime = 0;\n    this._changeTime = changeTime;\n\n    if (changeTime === 0) {\n      this._string = `${this._endVal}`;\n    }\n\n    this._isPlaying = true;\n    this.string = `${this._endVal}`;\n  }\n\n  public update(dt: number) {\n    if (!this._isPlaying) {\n      return;\n    }\n\n    if (this._currTime < this._changeTime) {\n      this._currTime += dt;\n      const targetVal = this._startVal + Math.floor(((this._currTime / this._changeTime) * this._diffVal));\n      this.string = `${targetVal}`;\n      return\n    }\n\n    this.string = `${this._endVal}`;\n    this._isPlaying = false;\n  }\n}\n"]}